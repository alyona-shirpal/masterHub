{"version":3,"file":"service.middleware.js","sourceRoot":"","sources":["../../../src/middlewares/service/service.middleware.ts"],"names":[],"mappings":";;;AAEA,2CAA2C;AAG3C,MAAM,iBAAiB;IACnB,KAAK,CAAC,mBAAmB,CAAC,GAAW,EAAE,GAAY,EAAE,IAAiB;QAClE,IAAG;YACC,MAAM,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,IAAyB,CAAC;YAEhD,MAAM,YAAY,GAAG,MAAM,sBAAY,CAAC,OAAO,CAAC;gBAC5C,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE;aAC9B,CAAC,CAAC;YAEH,IAAG,YAAY,EAAE;gBACb,IAAI,CAAC,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAA;gBACnD,OAAO;aACV;YAED,IAAI,EAAE,CAAC;SACV;QAAC,OAAM,CAAC,EAAE;YACP,IAAI,CAAC,CAAC,CAAC,CAAC;SACX;IACL,CAAC;CAEJ;AAEY,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,CAAC","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\n\r\nimport {ServiceModel} from '../../schemas';\r\nimport {IService} from '../../interfaces';\r\n\r\nclass ServiceMiddleware {\r\n    async checkDuplicateNames(req:Request, res:Response, next:NextFunction){\r\n        try{\r\n            const { title } = req.body as Partial<IService>;\r\n\r\n            const serviceTitle = await ServiceModel.findOne({\r\n                title: title?.toLowerCase()\r\n            });\r\n\r\n            if(serviceTitle) {\r\n                next(new Error('This service name already exists'))\r\n                return;\r\n            }\r\n\r\n            next();\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const serviceMiddleware = new ServiceMiddleware;"]}