{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;AAAA,mCAAmC;AACnC,mCAA4B;AAC5B,gCAAgC;AAChC,qCAAqC;AACrC,iCAAiC;AAEjC,qCAAkC;AAClC,qCAA4D;AAE5D,MAAM,GAAG;IAGL;QAFgB,QAAG,GAAwB,OAAO,EAAE,CAAC;QAGrD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAA,gBAAM,GAAE,CAAC,CAAC;QACvB,wCAAwC;QACxC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,WAAW,EAAE,CAAA;QAClB,IAAI,CAAC,OAAO,EAAE,CAAC;IACf,CAAC;IAED,4DAA4D;IAC5D,6DAA6D;IAC7D,kCAAkC;IAClC,SAAS;IACT,uBAAuB;IACvB,yCAAyC;IACzC,WAAW;IACX,SAAS;IACT,2CAA2C;IAC3C,6DAA6D;IAC7D,WAAW;IACX,EAAE;IACF,IAAI;IAEI,OAAO;QACX,QAAQ,CAAC,OAAO,CAAC,eAAM,CAAC,SAAS,CAAC,CAAC;QACnC,MAAM,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAA;QAE9B,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YAChB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAA;IACN,CAAC;IACO,WAAW;QACf,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,sBAAa,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,0BAAiB,CAAC,CAAC;IACtD,CAAC;CACJ;AAEY,QAAA,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC","sourcesContent":["import * as express from 'express';\r\nimport helmet from 'helmet';\r\n// import * as cors from 'cors';\r\nimport * as mongoose from 'mongoose';\r\nimport * as morgan from 'morgan';\r\n\r\nimport { config } from './config';\r\nimport { serviceRouter, serviceTypeRouter } from './routes';\r\n\r\nclass App {\r\n    public readonly app: express.Application = express();\r\n\r\n    constructor() {\r\n    this.app.use(morgan('dev'));\r\n    this.app.use(helmet());\r\n    // this.app.use(cors(App.configureCors))\r\n    this.app.use(express.json);\r\n    this.app.use(express.urlencoded({extended: true}));\r\n\r\n    this.mountRoutes()\r\n    this.setupDB();\r\n    }\r\n\r\n    // private static configureCors(origin: any, callback: any){\r\n    //     // const whiteList = config.ALLOWED_ORIGIN.split(';');\r\n    //     return callback(null, true)\r\n    //     //\r\n    //     // if(!origin) {\r\n    //     //     return callback(null, true)\r\n    //     // }\r\n    //     //\r\n    //     // if(!whiteList.includes(origin)) {\r\n    //     //   callback(new Error('Cors is not allowed'), false)\r\n    //     // }\r\n    //\r\n    // }\r\n\r\n    private setupDB(){\r\n        mongoose.connect(config.MONGO_URI);\r\n        const db = mongoose.connection\r\n\r\n        db.on('error', () => {\r\n            console.log('DB problem');\r\n        })\r\n    }\r\n    private mountRoutes(): void {\r\n        this.app.use('/services', serviceRouter);\r\n        this.app.use('/service-types', serviceTypeRouter);\r\n    }\r\n}\r\n\r\nexport const app = new App().app;"]}